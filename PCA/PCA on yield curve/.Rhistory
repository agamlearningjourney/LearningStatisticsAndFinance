#   filter(non_empty == 5) %>%
#   ## select the last date in a year, where all data available
#   group_by(symbol, year(date)) %>%
#   filter(row_number() == n()) %>%
#   ungroup() %>%
#   filter(
#     # date == "2021-11-18",
#     date >= "2010-01-01",
#     # month(date) == 12,
#     ) %>%
#   mutate(
#     var_order = case_when(
#       symbol == "T3MFF" ~ 3/12,
#       symbol == "T6MFF" ~ 6/12,
#       symbol == "T1YFF" ~ 1,
#       symbol == "T5YFF" ~ 5,
#       symbol == "T10YFF" ~ 10,
#     ))
## make plot at each end of month
df_plot <- df_yield_curve %>%
## select date where all data available
group_by(date) %>%
mutate(non_empty = sum(!is.na(price))) %>%
ungroup() %>%
filter(non_empty == 5) %>%
## select the last date in a year, where all data available
group_by(symbol, year(date), month(date)) %>%
filter(row_number() == n()) %>%
ungroup() %>%
## filter by date
# filter(
#   # date == "2021-11-18",
#   date >= "2018-01-01",
#   # month(date) == 12,
#   ) %>%
mutate(
var_order = case_when(
symbol == "T3MFF" ~ 3/12,
symbol == "T6MFF" ~ 6/12,
symbol == "T1YFF" ~ 1,
symbol == "T5YFF" ~ 5,
symbol == "T10YFF" ~ 10,
))
## plot
df_plot %>%
ggplot(aes(x = var_order, y = price)) +
geom_point() +
geom_line() +
facet_wrap(facets = vars(date))
library(tidyquant) # to use getYieldCurve
library(lubridate)
library(tidyverse)
library(quantmod)
# ##### DOWNLOAD data, or ...
# ## download: 3,6-Month, 1,5,10-year,  Treasury Constant Maturity Minus Federal Funds Rate
# df_yield_curve <- tq_get(c("T3MFF", "T6MFF", "T1YFF", "T5YFF", "T10YFF"),
#                          get = "economic.data",
#                          from = "1982-01-01" )
#
# ## save
# save(df_yield_curve, file = "df_yield_curve.RData" )
# ##### end
##### LOAD SAVED DATA
load(file = "df_yield_curve.RData" )
##### end
sapply(df_yield_curve, class)
unique(df_yield_curve$symbol)
# ## make plot at each year
# df_plot <- df_yield_curve %>%
#   ## select date where all data available
#   group_by(date) %>%
#   mutate(non_empty = sum(!is.na(price))) %>%
#   ungroup() %>%
#   filter(non_empty == 5) %>%
#   ## select the last date in a year, where all data available
#   group_by(symbol, year(date)) %>%
#   filter(row_number() == n()) %>%
#   ungroup() %>%
#   filter(
#     # date == "2021-11-18",
#     date >= "2010-01-01",
#     # month(date) == 12,
#     ) %>%
#   mutate(
#     var_order = case_when(
#       symbol == "T3MFF" ~ 3/12,
#       symbol == "T6MFF" ~ 6/12,
#       symbol == "T1YFF" ~ 1,
#       symbol == "T5YFF" ~ 5,
#       symbol == "T10YFF" ~ 10,
#     ))
## make plot at each end of month
df_plot <- df_yield_curve %>%
## select date where all data available
group_by(date) %>%
mutate(non_empty = sum(!is.na(price))) %>%
ungroup() %>%
filter(non_empty == 5) %>%
## select the last date in a year, where all data available
group_by(symbol, year(date), month(date)) %>%
filter(row_number() == n()) %>%
ungroup() %>%
## filter by date
filter(
# date == "2021-11-18",
date >= "2018-01-01",
# month(date) == 12,
) %>%
mutate(
var_order = case_when(
symbol == "T3MFF" ~ 3/12,
symbol == "T6MFF" ~ 6/12,
symbol == "T1YFF" ~ 1,
symbol == "T5YFF" ~ 5,
symbol == "T10YFF" ~ 10,
))
## plot
df_plot %>%
ggplot(aes(x = var_order, y = price)) +
geom_point() +
geom_line() +
facet_wrap(facets = vars(date))
df_PCA <- df_yield_curve %>%
select(symbol, date, price) %>%
spread(key = symbol, value = price) %>%
drop_na()
PCA_res <- prcomp(as.matrix(df_PCA %>% select(-c(date)) ),
scale. = TRUE)
summary(PCA_res)
# PCA_res$sdev
PCA_res$rotation
sum(PCA_res$rotation[,1]^2)
sum(PCA_res$rotation[,2]^2)
View(df_yield_curve)
#
unique(df_yield_curve$symbol)
#
unique(df_yield_curve$symbol)
length(unique(df_yield_curve$date))
length(unique(df_yield_curve$date))
#
unique(df_yield_curve$symbol)
length(unique(df_yield_curve$date))
df_PCA <- df_yield_curve %>%
select(symbol, date, price) %>%
spread(key = symbol, value = price) %>%
drop_na()
dim(df_PCA)
dim(df_PCA)
length(unique(df_yield_curve$date))
#
dim(df_PCA)
#
dim(df_PCA)
View(df_PCA)
knitr::opts_chunk$set(echo = TRUE)
set.seed(111)
T = 100
k = 2
Z = matrix(rnorm(k * T), nrow = T, ncol = k)
head(Z)
W = matrix(sample.int(2 * 15), nrow = 2, ncol = 15)
W
## generate unobservable data
set.seed(1)
## generate unobservable data
set.seed(1)
N_row = nrow(df_PCA)
N_col = 2 # two PCs
# Y is unobservable matrix, contains PC1 and PC2
Y = matrix(data = rnorm(nrow(df_PCA) * 2),
nrow = nrow(df_PCA),
ncol = 2)
head(Y)
cor(Y)
nrow(df_PCA)
W
View(W)
df_PCA <- df_yield_curve %>%
select(symbol, date, price) %>%
spread(key = symbol, value = price) %>%
drop_na()
PCA_res <- prcomp(as.matrix(df_PCA %>% select(-c(date)) ),
scale. = TRUE)
summary(PCA_res)
# PCA_res$sdev
PCA_res$rotation
PCA_res$rotation
# Tmat is transformation matrix. Transform Y into X, where X is observed data.
Tmat <- PCA_res$rotation[,1:2]
Tmat
Y <- PCA_res$x
Y
View(PCA_res$x)
Y <- PCA_res$x[,1:2]
Y
Y <- PCA_res$x[,1:2]
# Tmat is transformation matrix. Transform Y into X, where X is observed data.
Tmat <- PCA_res$rotation[,1:2]
dim(Y)
dim(Tmat)
# Tmat is transformation matrix. Transform Y into X, where X is observed data.
Tmat <- t(PCA_res$rotation[,1:2])
Tmat
dim(Tmat)
# Tmat is transformation matrix. Transform Y into X, where X is observed data.
Tmat <- t(PCA_res$rotation[,1:2])
# X is observed data. X is a function of Y.
X <- Y %*% Tmat
head(X)
head(X)
dim(X)
head(Y)
Tmat
# X is observed data. X is a function of Y.
X <- Y %*% Tmat
df_check <- prcomp(X)
df_check$x
df_check$rotation
df_check$sdev
summary(df_check)
Tmat
sd(Y)
sapply(Y, sd)
sapply(as.data.frame(Y), sd)
PCA_res$sdev
sum(PCA_res$rotation[,1]^2)
sum(PCA_res$rotation[,2]^2)
df_plot <- tibble(
PC = 1:5,
var = PCA_res$sdev^2/sum(PCA_res$sdev^2),
)
View(df_plot)
df_plot <- df_plot %>%
mutate(cumsumvar = cumsum(var))
View(df_plot)
summary(PCA_res)
PCA_res$sdev
PCA_res$sdev[1]
# Y is unobservable matrix, contains PC1 and PC2
Y1 <- rnorm(n = nrow(df_PCA), mean = 0, sd = PCA_res$sdev[1])
Y2 <- rnorm(n = nrow(df_PCA), mean = 0, sd = PCA_res$sdev[2])
Y <- data.frame(Y1, Y2)
View(Y)
Y <- matrix(Y1, Y2)
Y <- as.matrix(data.frame(Y1, Y2))
Y <- as.matrix(data.frame(Y1, Y2))
Y
PCA_res$rotation[,1:2]
PCA_res$x[,1:2]
sapply(as.data.frame(PCA_res$x[,1:2]), sd)
sapply(as.data.frame(PCA_res$x[,1:2]), mean)
round(sapply(as.data.frame(PCA_res$x[,1:2]), mean))
# Y is unobservable matrix, contains PC1 and PC2
Y1 <- rnorm(n = nrow(df_PCA), mean = 0, sd = PCA_res$sdev[1])
Y2 <- rnorm(n = nrow(df_PCA), mean = 0, sd = PCA_res$sdev[2])
Y <- as.matrix(data.frame(Y1, Y2))
# Tmat is transformation matrix. Transform Y into X, where X is observed data.
Tmat <- t(PCA_res$rotation[,1:2])
# X is observed data. X is a function of Y.
X <- Y %*% Tmat
head(X)
dim(X)
df_check <- prcomp(X)
df_check$sdev
summary(df_check)
#
dim(df_PCA)
## generate unobservable data
set.seed(1)
# Y is unobservable matrix, contains PC1 and PC2
Y1 <- rnorm(n = nrow(df_PCA), mean = 0, sd = PCA_res$sdev[1])
PCA_res$sdev[1]
PCA_res$sdev[2]
# Y is unobservable matrix, contains PC1 and PC2
Y1 <- rnorm(n = nrow(df_PCA), mean = 0, sd = 2)
Y2 <- rnorm(n = nrow(df_PCA), mean = 0, sd = 1)
Y <- as.matrix(data.frame(Y1, Y2))
t(PCA_res$rotation[,1:2])
?matrix
Tmat <- matrix(data = c(0.4, 0.4, 0.4, 0.4, 0.4,
0.5, 0.4, 0.1, -0.5, -0.6),
nrow = 2,
ncol = 5)
Tmat
colnames(Tmat) <- c("0.25", "0.5", "1", "5", "10")
rownames(Tmat) <- c("PC1", "PC2")
# Tmat is transformation matrix. Transform Y into X, where X is observed data.
Tmat <- t(PCA_res$rotation[,1:2])
Tmat
# Tmat is transformation matrix. Transform Y into X, where X is observed data.
# Tmat <- t(PCA_res$rotation[,1:2])
Tmat <- matrix(data = c(0.4, 0.4, 0.4, 0.4, 0.4,
0.5, 0.4, 0.1, -0.5, -0.6),
nrow = 2,
ncol = 5)
colnames(Tmat) <- c("0.25", "0.5", "1", "5", "10")
rownames(Tmat) <- c("PC1", "PC2")
Tmat
# Tmat is transformation matrix. Transform Y into X, where X is observed data.
# Tmat <- t(PCA_res$rotation[,1:2])
Tmat <- matrix(data = c(0.4, 0.4, 0.4, 0.4, 0.4,
0.5, 0.4, 0.1, -0.5, -0.6),
nrow = 2,
ncol = 5,
byrow = TRUE)
# Tmat is transformation matrix. Transform Y into X, where X is observed data.
# Tmat <- t(PCA_res$rotation[,1:2])
Tmat <- matrix(data = c(0.4, 0.4, 0.4, 0.4, 0.4,
0.5, 0.4, 0.1, -0.5, -0.6),
nrow = 2,
ncol = 5,
byrow = TRUE)
colnames(Tmat) <- c("0.25", "0.5", "1", "5", "10")
rownames(Tmat) <- c("PC1", "PC2")
Tmat
# X is observed data. X is a function of Y.
X <- Y %*% Tmat
head(X)
dim(X)
df_check <- prcomp(X)
df_check$sdev
summary(df_check)
library(tidyquant) # to use getYieldCurve
library(lubridate)
library(tidyverse)
library(quantmod)
# ##### DOWNLOAD data, or ...
# ## download: 3,6-Month, 1,5,10-year,  Treasury Constant Maturity Minus Federal Funds Rate
# df_yield_curve <- tq_get(c("T3MFF", "T6MFF", "T1YFF", "T5YFF", "T10YFF"),
#                          get = "economic.data",
#                          from = "1982-01-01" )
#
# ## save
# save(df_yield_curve, file = "df_yield_curve.RData" )
# ##### end
##### LOAD SAVED DATA
load(file = "df_yield_curve.RData" )
##### end
sapply(df_yield_curve, class)
unique(df_yield_curve$symbol)
# ## make plot at each year
# df_plot <- df_yield_curve %>%
#   ## select date where all data available
#   group_by(date) %>%
#   mutate(non_empty = sum(!is.na(price))) %>%
#   ungroup() %>%
#   filter(non_empty == 5) %>%
#   ## select the last date in a year, where all data available
#   group_by(symbol, year(date)) %>%
#   filter(row_number() == n()) %>%
#   ungroup() %>%
#   filter(
#     # date == "2021-11-18",
#     date >= "2010-01-01",
#     # month(date) == 12,
#     ) %>%
#   mutate(
#     var_order = case_when(
#       symbol == "T3MFF" ~ 3/12,
#       symbol == "T6MFF" ~ 6/12,
#       symbol == "T1YFF" ~ 1,
#       symbol == "T5YFF" ~ 5,
#       symbol == "T10YFF" ~ 10,
#     ))
## make plot at each end of month
df_plot <- df_yield_curve %>%
## select date where all data available
group_by(date) %>%
mutate(non_empty = sum(!is.na(price))) %>%
ungroup() %>%
filter(non_empty == 5) %>%
## select the last date in a year, where all data available
group_by(symbol, year(date), month(date)) %>%
filter(row_number() == n()) %>%
ungroup() %>%
## filter by date
filter(
# date == "2021-11-18",
date >= "2018-01-01",
# month(date) == 12,
) %>%
mutate(
var_order = case_when(
symbol == "T3MFF" ~ 3/12,
symbol == "T6MFF" ~ 6/12,
symbol == "T1YFF" ~ 1,
symbol == "T5YFF" ~ 5,
symbol == "T10YFF" ~ 10,
))
## plot
df_plot %>%
ggplot(aes(x = var_order, y = price)) +
geom_point() +
geom_line() +
facet_wrap(facets = vars(date))
df_PCA <- df_yield_curve %>%
select(symbol, date, price) %>%
spread(key = symbol, value = price) %>%
drop_na()
PCA_res <- prcomp(as.matrix(df_PCA %>% select(-c(date)) ),
scale. = TRUE)
summary(PCA_res)
# PCA_res$sdev
PCA_res$rotation
# PCA_res$center
# PCA_res$scale
# PCA_res$x
sum(PCA_res$rotation[,1]^2)
sum(PCA_res$rotation[,2]^2)
# summary(PCA_res)
# PCA_res$sdev
# plot(PCA_res)
df_plot <- tibble(
PC = 1:5,
var = PCA_res$sdev^2/sum(PCA_res$sdev^2),
)
df_plot <- df_plot %>%
mutate(cumsumvar = cumsum(var))
df_plot %>%
ggplot(aes(x = PC, y = var)) +
geom_bar(stat="identity", fill="steelblue")+
theme_minimal()
round(cor(PCA_res$x),2)
## generate unobservable data
set.seed(1)
# Y is unobservable matrix, contains PC1 and PC2
Y1 <- rnorm(n = nrow(df_PCA), mean = 0, sd = 2)
Y2 <- rnorm(n = nrow(df_PCA), mean = 0, sd = 1)
Y <- as.matrix(data.frame(Y1, Y2))
# Tmat is transformation matrix. Transform Y into X, where X is observed data.
# Tmat <- t(PCA_res$rotation[,1:2])
Tmat <- matrix(data = c(0.4, 0.4, 0.4, 0.4, 0.4,
0.5, 0.4, 0.1, -0.5, -0.6),
nrow = 2,
ncol = 5,
byrow = TRUE)
colnames(Tmat) <- c("0.25", "0.5", "1", "5", "10")
rownames(Tmat) <- c("PC1", "PC2")
# X is observed data. X is a function of Y.
X <- Y %*% Tmat
# Run PCA
df_check <- prcomp(X)
df_check$sdev
summary(df_check)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
# PCA_res$sdev
PCA_res$rotation
sum(PCA_res$rotation[,1]^2)
PCA_res$rotation
PCA_res$rotation[,1]
PCA_res$rotation[,1]^2
sum(PCA_res$rotation[,1]^2)
sum(PCA_res$rotation[,2]^2)
sum(PCA_res$rotation[,1]^2)
PCA_res$rotation
PCA_res$rotation[,1]^2
sum(PCA_res$rotation[,1]^2)
sum(PCA_res$rotation[,2]^2)
sum(PCA_res$rotation[,3]^2)
sum(PCA_res$rotation[,4]^2)
sum(PCA_res$rotation[,5]^2)
sum(PCA_res$rotation[,6]^2)
PCA_res$rotation
plot(PCA_res)
df_plot <- tibble(
PC = 1:5,
var = PCA_res$sdev^2/sum(PCA_res$sdev^2),
)
df_plot <- df_plot %>%
mutate(cumsumvar = cumsum(var))
df_plot %>%
ggplot(aes(x = PC, y = var)) +
geom_bar(stat="identity", fill="steelblue")+
theme_minimal()
df_plot %>%
ggplot(aes(x = PC, y = var)) +
geom_bar(stat="identity", fill="steelblue")+
theme_minimal()
plot(PCA_res)
plot(PCA_res)
df_check <- plot(PCA_res)
df_check
View(df_check)
PCA_res$sdev
PCA_res$sdev^2
df_plot <- tibble(
PC = 1:5,
var = PCA_res$sdev^2/sum(PCA_res$sdev^2),
)
df_plot <- df_plot %>%
mutate(cumsumvar = cumsum(var))
df_plot %>%
ggplot(aes(x = PC, y = var)) +
geom_bar(stat="identity", fill="steelblue")+
theme_minimal()
df_plot <- tibble(
PC = 1:5,
# var = PCA_res$sdev^2/sum(PCA_res$sdev^2),
var = PCA_res$sdev^2,
)
df_plot <- df_plot %>%
mutate(cumsumvar = cumsum(var))
df_plot %>%
ggplot(aes(x = PC, y = var)) +
geom_bar(stat="identity", fill="steelblue")+
theme_minimal()
df_plot %>%
ggplot(aes(x = PC, y = var)) +
geom_bar(stat="identity", fill="steelblue")+
theme_minimal()
plot(PCA_res)
